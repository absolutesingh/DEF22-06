package trees;

class Node {
	int data;
	Node left;
	Node right;

	Node(int data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}

}

public class BinaryTree {

	Node root; //Root of the Binary Tree
	
	BinaryTree(int rootData)
	{
		this.root = new Node(rootData);
	}
	
//	https://practice.geeksforgeeks.org/problems/sum-of-binary-tree/1/#
	int treeSum(Node root){
        if(root == null)
            return 0;
        
        return root.data + treeSum(root.left) + treeSum(root.right);
    }
	
	int countNodes(Node root){
        if(root == null)
            return 0;
        
        return 1 + countNodes(root.left) + countNodes(root.right);
    }
	
	int leafNode(Node root)
	{
		if(root == null)
            return 0;
		
		if(root.left == null && root.right == null) //if it is a leafNode
		{
			return 1;
		}
		
		return leafNode(root.left) + leafNode(root.right);
	}
	
	public int sumOfLeafNodes(Node root)
    {
        if(root == null)
            return 0;
		
		if(root.left == null && root.right == null) //if it is a leafNode
		{
			return root.data;
		}
		
		return sumOfLeafNodes(root.left) + sumOfLeafNodes(root.right);
    }
	
	void printAtLevel(Node root, int pendingSteps)
	{
		
	}
	
	public static void main(String[] args) {
		BinaryTree bt = new BinaryTree(2); //Create a Binary Tree with 2 as the root.
		bt.root.left = new Node(3);
		bt.root.right = new Node(5);
		bt.root.left.right = new Node(9);
		bt.root.right.left = new Node(7);
		//Sample tree has been created
		
		System.out.println(bt.treeSum(bt.root));
		System.out.println(bt.countNodes(bt.root));
		System.out.println(bt.leafNode(bt.root));
		System.out.println(bt.sumOfLeafNodes(bt.root));
		bt.printAtLevel(bt.root, 2);
	}

}
