package strings;

public class StringStudy {

	public static void main(String[] args) {
		String name = "Chitkara"; //created using string literal -> obj created in String Constant Pool
		String name2 = "Chitkara";
		
		// == operator -> compares references for objects, values for primitive data types
		System.out.println("name and name2 refer to the same object: " + (name == name2));
		
		String name3 = new String("Chitkara"); //created using constructor
		String name4 = new String("Chitkara");
		System.out.println("name3 and name4 refer to the same object: " + (name3 == name4));
		
		System.out.println("name and name4 refer to the same object: " + (name == name4));
		System.out.println("name and name3 refer to the same object: " + (name == name3));
		
//		STRINGS ARE IMMUTABLE
//		Everytime we do an operation on a string, a new string is created
		
//		1. CONCATENATION
		System.out.println("=================================================");
		System.out.println("1. CONCATENATION");
		
		String s1 = "Hello";
		System.out.println("s1: " + s1);
		System.out.println(s1 + " People");
		System.out.println("s1: " + s1);
		
		String s2 = s1.concat(", Good Morning!");
		System.out.println("s2: " + s2);
		System.out.println("s1: " + s1);
		
//		2. CHECK IF STRINGS ARE EQUAL IN VALUE
		System.out.println("=================================================");
		System.out.println("2. CHECK IF STRINGS ARE EQUAL IN VALUE -> EQUALS() FUNCTION");
		
//		s1.equals(s2) -> checks that the two strings have the same data
		System.out.println("name and name2 have the same content: " + name.equals(name2));
		System.out.println("name2 and name3 have the same content: " + name3.equals(name2));
		System.out.println("name3 and name4 have the same content: " + name3.equals(name4));
		System.out.println("name and name3 have the same content: " + name.equals(name3));
		System.out.println("name and name4 have the same content: " + name.equals(name4));
		
//		3. CREATE STRING FROM A CHARACTER ARRAY
		System.out.println("=================================================");
		System.out.println("3. CREATE STRING FROM A CHARACTER ARRAY");
		
		char arr[] = {'C','H','I','T','K','A','R','A'};
		String strFromArr = new String(arr); //Constructor Overloading
		System.out.println("strFromArr: " + strFromArr);
		
//		4. CREATE A PARTIAL STRING FROM A CHARACTER ARRAY
		System.out.println("=================================================");
		System.out.println("4. CREATE A PARTIAL STRING FROM A CHARACTER ARRAY");
		
		String partialStrFromArr = new String(arr, 4, 4); //passed the array, starting index, count of elements to be picked
		System.out.println("partialStrFromArr: " + partialStrFromArr);
		
 		
	}

}
